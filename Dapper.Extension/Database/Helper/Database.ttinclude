<#@ assembly name="System.Core"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="$(SolutionDir)\Dapper.Extension\bin\Debug\Dapper.dll"
#><#@ assembly name="$(SolutionDir)\Dapper.Extension\bin\Debug\MySql.Data.dll"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Text"
#><#@ import namespace="System.Linq"
#><#@ import namespace="MySql.Data.MySqlClient"
#><#@ import namespace="Dapper"
#>
<#+

// 获取数据库连接
// 

    public static class Database
    {
        public static IEnumerable<TableInfo> Build(string connectionString)
        {
            DefaultTypeMap.MatchNamesWithUnderscores = true;
            var connection = new MySql.Data.MySqlClient.MySqlConnection(connectionString);
            var database = connection.Database;
            var tablesql = string.Format("SELECT TABLE_NAME,TABLE_TYPE,TABLE_COMMENT from INFORmation_schema.TABLES WHERE TABLE_SCHEMA='{0}'", database);
            var tables = connection.Query<TableInfo>(tablesql);
            var columnsql = string.Format("SELECT TABLE_NAME,COLUMN_NAME,COLUMN_COMMENT,COLUMN_DEFAULT,IS_NULLABLE,DATA_TYPE,COLUMN_TYPE,EXTRA FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA='{0}'", database);
            var columns = connection.Query<ColumnInfo>(columnsql);
            foreach (var table in tables)
            {
                table.Columns = columns.ToList().FindAll(c=>c.TableName==table.TableName);
            }
            return tables;
        }
    }
    public class TableInfo
    {
        public string TableName { get; set; }
        public string TableType { get; set; }
        public string TableComment { get; set; }
        public List<ColumnInfo> Columns{ get; set; }
    }
    public class ColumnInfo
    {
        public string TableName { get; set; }
        public string ColumnName { get; set; }
        public string ColumnComment { get; set; }
        public string ColumnDefault { get; set; }
        public string IsNullable { get; set; }
        public string ColumnType { get; set; }
        public string DataType { get; set; }
        public string Extra { get; set; }
    }
    public static class Utils
    {
		//字段类型映射
        public static string GetTypeName(string name)
        {
            var type = "object";
            switch (name)
            {
                case "varchar": type = "string"; break;
                case "text": type = "string"; break;
				case "char": type = "string"; break;
				case "tinyint": type = "int?"; break;
				case "smallint": type = "int?"; break;
                case "int": type = "int?"; break;
				case "integer": type = "int?"; break;
				case "bigint": type = "int?"; break;
				case "mediumint": type = "int?"; break;
				case "real": type = "float?"; break;
				case "float": type = "float?"; break;
				case "double": type = "double?"; break;
				case "decimal": type = "decimal?"; break;
				case "date": type = "DateTime?"; break;
				case "datetime": type = "DateTime?"; break;
            }
            return type;
        }
		//Pacsl命名转换
        public static string Pascal(string name)
        {
            var list = new List<string>();
            foreach (var item in name.Split('_'))
            {
                list.Add(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(item.ToLower()));
            }
            return string.Join("",list);
        }
    }
 #>